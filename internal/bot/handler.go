package bot

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"slices"

	ikb "github.com/BobaUbisoft17/chsuBot/internal/bot/keyboard/inlineKeyboard"
	kb "github.com/BobaUbisoft17/chsuBot/internal/bot/keyboard/replyKeyboard"
	"github.com/NicoNex/echotron/v3"
)

var calendarKeyboardCallbacks = []string{"next", "back", "menu"}

var groupKeyboardCallbacks = []string{"next", "previous", "back"}

func (b *bot) HandleMessage(update *echotron.Update) stateFn {
	if update.Message != nil {
		switch update.Message.Text {
		case "/start":
			b.sendWelcome()
		case "–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å":
			b.IsAdmin(b.createPost)
		case "–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
			b.chooseDate()
		case "–ù–∞–∑–∞–¥":
			b.back()
		case "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
			b.getTodaySchedule()
		case "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
			b.getTomorrowSchedule()
		case "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
			b.getAnotherDateSchedule()
		case "–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω":
			b.getDurationSchedule()
		case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			b.getSettings()
		case "–ó–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
			b.rememberGroup()
		case "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
			b.changeGroup()
		case "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ":
			b.deleteGroupInfo()
		case "–ü–æ–º–æ—â—å":
			b.help()
		}
	}
	return b.state
}

func (b *bot) sendWelcome() {
	replyMarkup := kb.GreetingKeyboard()
	res, _ := b.GetChat(b.chatID)
	b.answer(
		fmt.Sprintf(
			"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!!!\n–Ø –±–æ—Ç, —É–ø—Ä–æ—â–∞—é—â–∏–π –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ß–ì–£",
			res.Result.FirstName,
		),
		replyMarkup,
	)
}

func (b *bot) chooseDate() {
	replyMarkup := kb.ChooseDateMarkup()
	b.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", replyMarkup)
}

func (b *bot) back() {
	replyMarkup := kb.GreetingKeyboard()
	b.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup)
}

func (b *bot) getTodaySchedule() {
	if b.usePackages.usersDb.IsUserHasGroup(b.chatID) || b.group != 0 {
		var groupID int
		if b.group != 0 {
			groupID, b.group = b.group, 0
		} else {
			groupID = b.usePackages.usersDb.GetUserGroup(b.chatID)
		}
		b.state = b.HandleMessage
		b.answer(
			b.usePackages.groupDb.GetTodaySchedule(groupID),
			kb.ChooseDateMarkup(),
		)
	} else {
		b.state = b.chooseUniversity
		b.nextFn = b.getTodaySchedule
		b.previousFn = b.chooseDate
		b.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", ikb.FirstSymbolKeyboard())
	}
}

func (b *bot) getTomorrowSchedule() {
	if b.usePackages.usersDb.IsUserHasGroup(b.chatID) || b.group != 0 {
		var groupID int
		if b.group != 0 {
			groupID, b.group = b.group, 0
		} else {
			groupID = b.usePackages.usersDb.GetUserGroup(b.chatID)
		}
		b.state = b.HandleMessage
		b.answer(
			b.usePackages.groupDb.GetTomorrowSchedule(groupID),
			kb.ChooseDateMarkup(),
		)
	} else {
		b.nextFn = b.getTomorrowSchedule
		b.previousFn = b.chooseDate
		b.state = b.chooseUniversity
		b.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", ikb.FirstSymbolKeyboard())
	}
}

func (b *bot) getAnotherDateSchedule() {
	b.state = b.getDate
	b.previousFn = b.chooseDate
	timeNow := time.Now()
	b.endDate = time.Time{}
	b.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
		ikb.New(
			int(timeNow.Month()),
			timeNow.Year(),
		).BuildMarkup(),
	)
}

func (b *bot) getDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	if callback != nil {
		command := strings.Split(callback.Data, " ")[0]
		switch {
		case slices.Contains(calendarKeyboardCallbacks, command):
			b.manageCalendarKeyboard(callback)
		case callback.Data != "nil":
			b.startDate, _ = parseDate(callback.Data)
			if b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
				b.closeCalendarMarkup(callback)
				b.group = b.usePackages.usersDb.GetUserGroup(b.chatID)
				b.sendSchedule()
				b.state = b.HandleMessage
			} else {
				b.state = b.chooseUniversity
				b.nextFn = b.sendSchedule
				b.editMessage(
					callback.Message.ID,
					"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
					ikb.FirstSymbolKeyboard(),
				)
			}
		}
	}
	return b.state
}

func (b *bot) chooseUniversity(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	if callback != nil {
		switch {
		case callback.Data == "back":
			b.editMessage(
				callback.Message.ID,
				"–í–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
				echotron.InlineKeyboardMarkup{},
			)
			b.previousFn()
			b.state = b.HandleMessage
		default:
			b.state = b.getGroup
			keyboard := ikb.CreateGroupKeyboard(
				b.usePackages.groupDb.GroupsStartsWith(callback.Data),
				callback.Data,
				1,
			)
			b.editMessage(callback.Message.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É", keyboard)
		}
	}
	return b.state
}

func (b *bot) getGroup(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	if callback != nil {
		command := strings.Split(callback.Data, " ")[0]
		switch {
		case command == "back":
			b.editMessage(
				callback.Message.ID,
				"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
				ikb.FirstSymbolKeyboard(),
			)
			b.state = b.chooseUniversity
		case slices.Contains(groupKeyboardCallbacks, command):
			splitData := strings.Split(callback.Data, " ")
			university, stringPart := splitData[1], splitData[2]
			part, _ := strconv.Atoi(stringPart)
			groups := b.usePackages.groupDb.GroupsStartsWith(university)
			b.editKeyboard(
				callback.Message.ID,
				ikb.CreateGroupKeyboard(groups, university, part),
			)
		default:
			b.editMessage(
				callback.Message.ID,
				"–í–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
				echotron.InlineKeyboardMarkup{},
			)
			b.group, _ = strconv.Atoi(callback.Data)
			b.nextFn()
		}
	}
	return b.state
}

func (b *bot) getDurationSchedule() {
	b.state = b.getStartDate
	b.previousFn = b.chooseDate
	timeNow := time.Now()
	b.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
		ikb.New(
			int(timeNow.Month()),
			timeNow.Year(),
		).BuildMarkup(),
	)
}

func (b *bot) getStartDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	if callback != nil {
		command := strings.Split(callback.Data, " ")[0]
		switch {
		case slices.Contains(calendarKeyboardCallbacks, command):
			b.manageCalendarKeyboard(callback)
		case callback.Data != "nil":
			b.startDate, _ = parseDate(callback.Data)
			b.state = b.getSecondDate
			b.answer(
				"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–≤–µ—Ä—Ö—É)",
				nil,
			)
		}
	}
	return b.state
}

func (b *bot) getSecondDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	if callback != nil {
		switch {
		case slices.Contains(calendarKeyboardCallbacks, strings.Split(callback.Data, " ")[0]):
			b.manageCalendarKeyboard(callback)
		case callback.Data != "nil":
			b.endDate, _ = parseDate(callback.Data)
			b.dateSequenceCorrection()
			if b.validDuration() {
				if b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
					b.closeCalendarMarkup(callback)
					b.group = b.usePackages.usersDb.GetUserGroup(b.chatID)
					b.sendSchedule()
					b.state = b.HandleMessage
				} else {
					b.state = b.chooseUniversity
					b.nextFn = b.sendSchedule
					b.editMessage(
						callback.Message.ID,
						"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
						ikb.FirstSymbolKeyboard(),
					)
				}
			} else {
				b.answer(
					"–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. "+
						"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 31 –¥–Ω—è. "+
						"(–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)",
					nil,
				)
			}
		}
	}
	return b.state
}

func (b *bot) getSettings() {
	var replyMarkup echotron.ReplyKeyboardMarkup
	if !b.usePackages.usersDb.IsUserInDB(b.chatID) {
		b.usePackages.usersDb.AddUser(b.chatID)
	}
	if b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
		replyMarkup = kb.ChangeGroupKeyboard()
	} else {
		replyMarkup = kb.MemoryGroupKeyboard()
	}
	b.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", replyMarkup)
}

func (b *bot) rememberGroup() {
	if !b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
		b.state = b.chooseUniversity
		b.nextFn = b.addUserGroup
		b.previousFn = b.getSettings
		b.getFirstSymbolKeyboard()
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}

func (b *bot) addUserGroup() {
	b.usePackages.usersDb.ChangeUserGroup(b.chatID, b.group)
	b.state = b.HandleMessage
	b.group = 0
	b.answer(
		"–Ø –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
		kb.GreetingKeyboard(),
	)
}

func (b *bot) changeGroup() {
	if b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
		b.state = b.chooseUniversity
		b.nextFn = b.updateUserGroup
		b.previousFn = b.getSettings
		b.getFirstSymbolKeyboard()
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}

func (b *bot) updateUserGroup() {
	b.state = b.HandleMessage
	if b.usePackages.usersDb.GetUserGroup(b.chatID) != b.group {
		b.usePackages.usersDb.ChangeUserGroup(b.chatID, b.group)
		b.group = 0
		b.answer(
			"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≥—Ä—É–ø–ø—É",
			kb.GreetingKeyboard(),
		)
	} else {
		b.answer(
			"–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏",
			nil,
		)
	}
}

func (b *bot) deleteGroupInfo() {
	if b.usePackages.usersDb.IsUserHasGroup(b.chatID) {
		b.usePackages.usersDb.DeleteGroup(b.chatID)
		replyMarkup := kb.GreetingKeyboard()
		b.answer("–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", replyMarkup)
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}

func (b *bot) help() {
	b.answer(
		"–ë–æ—Ç, —É–ø—Ä–æ—â–∞—é—â–∏–π –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω–∏–∞–º–∏ –ß–ì–£.\n\n"+
			"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞, "+
			"—Ç–∞–∫ –∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫."+
			"–ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "+
			"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é *–æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏.\n\n"+
			"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤—ã–ª–æ–∂–µ–Ω –Ω–∞ GitHub "+
			"https://github.com/BobaUbisoft17/chsuBot\n"+
			"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞:\n"+
			"–¢–µ–ª–µ–≥—Ä–∞–º @BobaUbisoft\n"+
			"VK vk.com/bobaubisoft\n"+
			"–ü–æ—á—Ç–∞ aksud2316@gmail.com\n\n"+
			"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: 5536 9137 8142 8269",
		nil,
	)
}
