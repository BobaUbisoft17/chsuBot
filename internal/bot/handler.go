package bot

import (
	"fmt"
	"strings"
	"time"

	calendar "github.com/BobaUbisoft17/chsuBot/internal/bot/keyboard/inlineKeyboard"
	kb "github.com/BobaUbisoft17/chsuBot/internal/bot/keyboard/replyKeyboard"
	"github.com/NicoNex/echotron/v3"
)

var inlineKeyboardCallbacks = map[string]bool{
	"next": true,
	"back": true,
	"menu": true,
}

var manageGroupKeyboard = map[string]bool{
	"–ù–∞–∑–∞–¥":     true,
	"–î–∞–ª—å—à–µ ¬ª":  true,
	"¬´ –û–±—Ä–∞—Ç–Ω–æ": true,
}

func (b *bot) HandleMessage(update *echotron.Update) stateFn {
	switch update.Message.Text {
	case "/start":
		b.sendWelcome()
	case "–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å":
		b.IsAdmin(b.createPost)
	case "–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
		b.chooseDate()
	case "–ù–∞–∑–∞–¥":
		b.back()
	case "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
		b.getTodaySchedule()
	case "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
		b.getTomorrowSchedule()
	case "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
		b.getAnotherDateSchedule()
	case "–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω":
		b.getDurationSchedule()
	case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		b.getSettings()
	case "–ó–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
		b.memoryGroup()
	case "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
		b.changeGroup()
	case "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ":
		b.deleteGroupInfo()
	}
	return b.state
}

func (b *bot) sendWelcome() {
	replyMarkup := kb.GreetingKeyboard()
	res, _ := b.GetChat(b.chatID)
	b.answer(
		fmt.Sprintf(
			"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!!!\n–Ø –±–æ—Ç, —É–ø—Ä–æ—â–∞—é—â–∏–π –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ß–ì–£",
			res.Result.FirstName,
		),
		replyMarkup,
	)
}

func (b *bot) chooseDate() {
	replyMarkup := kb.ChooseDateMarkup()
	b.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", replyMarkup)
}

func (b *bot) back() {
	replyMarkup := kb.GreetingKeyboard()
	b.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup)
}

func (b *bot) getTodaySchedule() {
	if b.usersDb.IsUserHasGroup(b.chatID) || b.group != 0 {
		var groupID int
		if b.group != 0 {
			groupID, b.group = b.group, 0
		} else {
			groupID = b.usersDb.GetUserGroup(b.chatID)
		}
		b.answer(
			b.groupDb.GetTodaySchedule(groupID),
			kb.ChooseDateMarkup(),
		)
	} else {
		b.state = b.getGroup
		b.nextState = b.getTodaySchedule
		b.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", kb.FirstPartGroups(b.groupDb.GetGroupNames()))
	}
}

func (b *bot) getTomorrowSchedule() {
	if b.usersDb.IsUserHasGroup(b.chatID) || b.group != 0 {
		var groupID int
		if b.group != 0 {
			groupID, b.group = b.group, 0
		} else {
			groupID = b.usersDb.GetUserGroup(b.chatID)
		}
		b.answer(
			b.groupDb.GetTomorrowSchedule(groupID),
			kb.ChooseDateMarkup(),
		)
	} else {
		b.nextState = b.getTomorrowSchedule
		b.state = b.getGroup
		b.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", kb.FirstPartGroups(b.groupDb.GetGroupNames()))
	}
}

func (b *bot) getAnotherDateSchedule() {
	b.state = b.getDate
	timeNow := time.Now()
	b.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
		calendar.New(
			int(timeNow.Month()),
			timeNow.Year(),
		).BuildMarkup(),
	)
}

func (b *bot) getDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	switch {
	case callback != nil && inlineKeyboardCallbacks[strings.Split(callback.Data, " ")[0]]:
		b.manageCalendarKeyboard(callback)
	case callback != nil && callback.Data != "nil":
		b.startDate = callback.Data
		b.closeCalendarMarkup(callback)
		if b.usersDb.IsUserHasGroup(b.chatID) {
			b.group = b.usersDb.GetUserGroup(b.chatID)
			b.sendSchedule()
			b.state = b.HandleMessage
		} else {
			b.state = b.getGroup
			b.nextState = b.sendSchedule
			b.getGroupKeyboard()
		}
	}
	return b.state
}

func (b *bot) getGroup(update *echotron.Update) stateFn {
	message := update.Message.Text
	if manageGroupKeyboard[message] {
		b.editGroupKeyboard(message)
	} else if b.groupDb.GroupNameIsCorrect(message) {
		b.group = b.groupDb.GroupId(message)
		b.nextState()
		b.state = b.HandleMessage
	} else {
		b.answer(
			"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
			nil,
		)
	}
	return b.state
}

func (b *bot) getDurationSchedule() {
	b.state = b.getStartDate
	timeNow := time.Now()
	b.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
		calendar.New(
			int(timeNow.Month()),
			timeNow.Year(),
		).BuildMarkup(),
	)
}

func (b *bot) getStartDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	switch {
	case callback != nil && inlineKeyboardCallbacks[strings.Split(callback.Data, " ")[0]]:
		b.manageCalendarKeyboard(callback)
	case callback != nil && callback.Data != "nil":
		b.startDate = callback.Data
		b.state = b.getSecondDate
		b.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–≤–µ—Ä—Ö—É)", nil)
	}
	return b.state
}

func (b *bot) getSecondDate(update *echotron.Update) stateFn {
	callback := update.CallbackQuery
	switch {
	case callback != nil && inlineKeyboardCallbacks[strings.Split(callback.Data, " ")[0]]:
		b.manageCalendarKeyboard(callback)
	case callback != nil && callback.Data != "nil":
		b.endDate = callback.Data
		_ = b.orderDateCheck()
		if b.validDuration() {
			b.closeCalendarMarkup(callback)
			if b.usersDb.IsUserHasGroup(b.chatID) {
				b.group = b.usersDb.GetUserGroup(b.chatID)
				b.sendSchedule()
				b.state = b.HandleMessage
			} else {
				b.state = b.getGroup
				b.nextState = b.sendSchedule
				b.getGroupKeyboard()
			}
		} else {
			b.answer(
				"–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 31 –¥–Ω—è. (–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)",
				nil,
			)
		}
	}
	return b.state
}

func (b *bot) getSettings() {
	var replyMarkup echotron.ReplyKeyboardMarkup
	if !b.usersDb.IsUserInDB(b.chatID) {
		b.usersDb.AddUser(b.chatID)
	}
	if b.usersDb.IsUserHasGroup(b.chatID) {
		replyMarkup = kb.ChangeGroupKeyboard()
	} else {
		replyMarkup = kb.MemoryGroupKeyboard()
	}
	b.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", replyMarkup)
}

func (b *bot) memoryGroup() {
	if !b.usersDb.IsUserHasGroup(b.chatID) {
		b.state = b.addUserGroup
		b.getGroupKeyboard()
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}

func (b *bot) addUserGroup(update *echotron.Update) stateFn {
	message := update.Message.Text
	if manageGroupKeyboard[message] {
		b.editGroupKeyboard(message)
	} else if b.groupDb.GroupNameIsCorrect(message) {
		b.usersDb.ChangeUserGroup(b.chatID, message)
		b.state = b.HandleMessage
		b.answer(
			"–Ø –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
			kb.GreetingKeyboard(),
		)
	} else {
		b.answer(
			"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
			nil,
		)
	}
	return b.state
}

func (b *bot) changeGroup() {
	if b.usersDb.IsUserHasGroup(b.chatID) {
		b.state = b.updateUserGroup
		b.getGroupKeyboard()
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}

func (b *bot) updateUserGroup(update *echotron.Update) stateFn {
	message := update.Message.Text
	if manageGroupKeyboard[message] {
		b.editGroupKeyboard(message)
	} else if b.groupDb.GroupNameIsCorrect(message) {
		if b.usersDb.GetUserGroup(b.chatID) != b.groupDb.GroupId(message) {
			b.state = b.HandleMessage
			b.usersDb.ChangeUserGroup(b.chatID, message)
			b.answer(
				"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≥—Ä—É–ø–ø—É",
				kb.GreetingKeyboard(),
			)
		} else {
			b.answer(
				"–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏",
				nil,
			)
		}
	} else {
		b.answer(
			"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
			nil,
		)
	}
	return b.state
}

func (b *bot) deleteGroupInfo() {
	if b.usersDb.IsUserHasGroup(b.chatID) {
		b.usersDb.DeleteGroup(b.chatID)
		replyMarkup := kb.GreetingKeyboard()
		b.answer("–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", replyMarkup)
	} else {
		b.answer("–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè", nil)
	}
}
